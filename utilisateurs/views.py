from django.shortcuts import render, redirect
from django.db import transaction
from django.contrib.auth import login,authenticate, logout
from django.contrib import messages
import json
import re
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.contrib.auth.models import User
from django.core.exceptions import ObjectDoesNotExist, ValidationError

# Create your views here.
# fonction pour creer une compte
from django.contrib.auth.models import User
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.shortcuts import render, redirect
from django.contrib import messages
from .models import Compte  # Importez le mod√®le Compte
import re
from django.shortcuts import get_object_or_404
from Produits.models import parametre  
import os
from .forms import PhotoProfilForm

def creation_compte(request):
    if request.method == "POST":
        username = request.POST['username']
        email = request.POST['email']
        password = request.POST['password']
        password_confirm = request.POST['password_confirm']

        # V√©rification des mots de passe
        if password != password_confirm:
            messages.error(request, "Les mots de passe ne sont pas identiques, veuillez r√©essayer.")
            return redirect("creation")

        # V√©rification de la longueur et des caract√®res
        if len(password) < 8 or not re.search(r'[A-Za-z]', password) or not re.search(r'\d', password) or not re.search(r'[!@#$%(),.?":{}|<>]', password):
            messages.error(request, "Le mot de passe doit contenir au moins 8 caract√®res, y compris des lettres, des chiffres et des caract√®res sp√©ciaux.")
            return redirect("creation")

        # V√©rification du format de l'adresse email
        try:
            validate_email(email)
        except ValidationError:
            messages.error(request, "L'adresse email est invalide. Veuillez r√©essayer.")
            return redirect("creation")

        # V√©rification de l'existence de l'email et du nom d'utilisateur
        if User.objects.filter(username=username).exists():
            messages.error(request, "Ce nom d'utilisateur existe d√©j√†. Veuillez r√©essayer.")
            return redirect("creation")

        if User.objects.filter(email=email).exists():
            messages.error(request, "Cette adresse email existe d√©j√†. Veuillez utiliser une autre adresse email.")
            return redirect("creation")

        try:
            # D√©marrer une transaction atomique
            with transaction.atomic():
                # Cr√©ation de l'utilisateur principal
                utilisateur_principal = User.objects.create_user(username=username, email=email, password=password)

                # V√©rification si un compte existe d√©j√† pour cet utilisateur
                if Compte.objects.filter(administrateur=utilisateur_principal).exists():
                    messages.error(request, "Un compte existe d√©j√† pour cet utilisateur.")
                    return redirect("creation")

                # Cr√©ation du compte associ√©
                compte = Compte.objects.create(nom=username, administrateur=utilisateur_principal)

                # Cr√©ation du profil utilisateur associ√©
                UtilisateurProfil.objects.create(
                    utilisateur=utilisateur_principal,
                    compte=compte,
                    est_admin=True  # Par d√©faut, le cr√©ateur du compte est admin
                )

                # D√©finir le chemin du logo par d√©faut (dans le r√©pertoire 'static')
                logo_path = os.path.join(settings.STATIC_URL, 'images/12.jpeg')  # Assurez-vous que ce chemin est correct

                # Cr√©ation des param√®tres par d√©faut pour le compte
                parametre.objects.create(
                    compte=compte,
                    user=utilisateur_principal,
                    name=f"Param√®tre de {username}",
                    adresse="Adresse par d√©faut",
                    devise="FCFA",
                    email=email,
                    numero="0000000000",
                    fiscal="Non sp√©cifi√©",
                    logo=f'images/12.jpeg',
                )
                
                
                        # G√©n√©rer l'URL de la page de connexion
            login_url = request.build_absolute_uri(reverse('login'))

            # Envoi de l'email de bienvenue
            subject = "Bienvenue sur SuperPharma - Optimisez la gestion de votre pharmacie !"
            message = f"""
            Bonjour {username},

            F√©licitations et bienvenue dans l'univers de SuperPharma !

            Nous sommes heureux de vous annoncer que votre compte a √©t√© cr√©√© avec succ√®s. üéâ

            SuperPharma est l'outil id√©al pour g√©rer efficacement votre pharmacie. Gr√¢ce √† nos fonctionnalit√©s avanc√©es, vous pourrez :
            ‚úÖ G√©rer vos stocks en temps r√©el
            ‚úÖ √âmettre des devis et factures personnalis√©s
            ‚úÖ Garder un ≈ìil sur l'expiration de vos produits
            ‚úÖ Et bien plus encore !

            Notre √©quipe est √† votre disposition pour vous accompagner √† chaque √©tape de votre parcours. Nous vous invitons √† vous connecter d√®s maintenant et √† d√©couvrir tout ce que SuperPharma a √† offrir.

            Pour vous connecter, cliquez ici : {login_url}

            Nous vous remercions de votre confiance et nous avons h√¢te de vous voir tirer parti de toutes les fonctionnalit√©s de SuperPharma pour une gestion optimale de votre pharmacie.

            √Ä bient√¥t et bonne gestion !

            Cordialement,
            L'√©quipe SuperPharma
            """
            send_mail(
                subject,
                message,
                settings.DEFAULT_FROM_EMAIL,  # Utilise l'email par d√©faut d√©fini dans settings.py
                [email],  # L'email du destinataire
                fail_silently=False,
            )

            # Si tout a fonctionn√©, on envoie un message de succ√®s
            messages.success(request, "F√©licitations ! Votre compte principal a √©t√© cr√©√© avec succ√®s. Veuillez vous connecter.")
            return redirect('login')

        except Exception as e:
            # En cas d'exception, la transaction sera annul√©e et rien ne sera enregistr√©
            messages.error(request, f"Une erreur est survenue. D√©tails de l'erreur: {str(e)}")
            return redirect("creation")

    return render(request, "creation.html")
# compte pour les utilisateur d'un compte principal
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect
from django.contrib import messages
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.contrib.auth.models import User
from .models import UtilisateurProfil

import re


@login_required
def creation_utilisateur_secondaire(request):
    if request.method == "POST":
        username = request.POST.get('username')
        email = request.POST.get('email')
        password = request.POST.get('password')
        password_confirm = request.POST.get('password_confirm')

        # V√©rification des mots de passe
        if password != password_confirm:
            messages.error(request, "Les mots de passe ne sont pas identiques. Veuillez r√©essayer.")
            return redirect("creation_utilisateur_secondaire")

        # V√©rification de la longueur et des caract√®res du mot de passe
        if len(password) < 8 or not re.search(r'[A-Za-z]', password) or not re.search(r'\d', password) or not re.search(r'[!@#$%(),.?":{}|<>]', password):
            messages.error(request, "Le mot de passe doit contenir au moins 8 caract√®res, incluant des lettres, des chiffres et des caract√®res sp√©ciaux.")
            return redirect("creation_utilisateur_secondaire")

        # V√©rification du format de l'adresse email
        try:
            validate_email(email)
        except ValidationError:
            messages.error(request, "L'adresse email est invalide. Veuillez r√©essayer.")
            return redirect("creation_utilisateur_secondaire")

        # V√©rification de l'existence de l'email et du nom d'utilisateur
        if User.objects.filter(username=username).exists():
            messages.error(request, "Ce nom d'utilisateur existe d√©j√†. Veuillez r√©essayer avec un autre.")
            return redirect("creation_utilisateur_secondaire")

        if User.objects.filter(email=email).exists():
            messages.error(request, "Cette adresse email est d√©j√† utilis√©e. Veuillez r√©essayer avec une autre.")
            return redirect("creation_utilisateur_secondaire")

        # V√©rification que l'utilisateur connect√© a un compte
        try:
            compte = request.user.profil.compte  # R√©cup√®re le compte via le profil de l'utilisateur connect√©
            compte_nom = compte.nom  # R√©cup√®re le nom du compte
        except AttributeError:
            messages.error(request, "Aucun compte administrateur associ√© √† cet utilisateur. Veuillez contacter l'administrateur principal.")
            return redirect("creation_utilisateur_secondaire")

        # Cr√©ation de l'utilisateur secondaire
        utilisateur_secondaire = User.objects.create_user(username=username, email=email, password=password)

        # Association de l'utilisateur secondaire au compte existant
        UtilisateurProfil.objects.create(utilisateur=utilisateur_secondaire, compte=compte, est_admin=False)
        
        
                # G√©n√©rer l'URL de la page de connexion
        login_url = request.build_absolute_uri(reverse('login'))

        # Envoi de l'email de bienvenue
        subject = "Bienvenue sur SuperPharma - Votre acc√®s en tant qu'utilisateur secondaire"
        message = f"""
        Bonjour {username},

        Nous sommes ravis de vous informer que vous √™tes d√©sormais un utilisateur secondaire du compte SuperPharma associ√© au compte '{compte_nom}'.

        En tant qu'utilisateur secondaire, vous avez d√©sormais acc√®s √† toutes les fonctionnalit√©s essentielles de SuperPharma pour vous aider dans la gestion de la pharmacie. Vous pourrez :
        ‚úÖ Acc√©der √† l'inventaire des produits
        ‚úÖ Cr√©er des devis et des factures
        ‚úÖ Consulter l'historique des transactions

        Vous avez √©t√© ajout√© √† un compte existant, ce qui vous permet de profiter d'une gestion collaborative tout en maintenant la s√©curit√© et l'efficacit√©.

        Pour vous connecter √† votre compte, veuillez cliquer sur le lien suivant : {login_url}

        Nous vous remercions de faire partie de SuperPharma et de contribuer √† la gestion optimale de votre pharmacie.

        Si vous avez des questions ou des besoins sp√©cifiques, n'h√©sitez pas √† contacter l'administrateur principal.

        Cordialement,
        L'√©quipe SuperPharma
        """

        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,  # Utilise l'email par d√©faut d√©fini dans settings.py
            [email],  # L'email du destinataire
            fail_silently=False,
        )

        messages.success(request, "L'utilisateur secondaire a √©t√© cr√©√© et li√© √† votre compte avec succ√®s. Un email de bienvenue a √©t√© envoy√©.")
        return redirect("liste_utilisateurs")

    # Si ce n'est pas une requ√™te POST, afficher le formulaire
    return render(request, "creation.html")

#les utilisateurs
@login_required
def liste_utilisateurs(request):
    # R√©cup√©ration du compte de l'administrateur connect√© via son profil
    compte = request.user.profil.compte
    
    # Filtrage des utilisateurs qui appartiennent au m√™me compte
    utilisateurs = User.objects.filter(profil__compte=compte)
    
    return render(request, "liste_utilisateurs.html", {"utilisateurs": utilisateurs})

@login_required
def supprimer_utilisateur(request, utilisateur_id):
    utilisateur = get_object_or_404(User, id=utilisateur_id)
    
    # V√©rifier si l'utilisateur appartient au m√™me compte que l'admin connect√©
    if utilisateur.profil.compte != request.user.profil.compte:
        messages.error(request, "Vous n'avez pas l'autorisation de supprimer cet utilisateur.")
        return redirect('liste_utilisateurs')
    
    # V√©rifier si l'utilisateur connect√© est un administrateur
    if utilisateur.profil.est_admin :
        messages.error(request, "Impossible de supprimer un administrateur.")
        return redirect('liste_utilisateurs')
    
    if request.method == "POST":
        
        nom_utilisateur = utilisateur.username
        email_utilisateur = utilisateur.email
        
        utilisateur.delete()
        
                # Envoyer un email √† l'utilisateur supprim√©
        subject = "Votre compte SuperPharma a √©t√© supprim√©"
        message = f"""
        Bonjour {nom_utilisateur},

        Nous vous informons que votre compte SuperPharma a √©t√© supprim√© par un administrateur.

        Si vous avez des questions concernant cette suppression ou si vous souhaitez en discuter, nous vous encourageons √† contacter l'administrateur de votre compte SuperPharma.

        Nous vous remercions de votre compr√©hension.

        Cordialement,
        L'√©quipe SuperPharma
        """

        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,  # Utilise l'email par d√©faut d√©fini dans settings.py
            [email_utilisateur],  # L'email de l'utilisateur supprim√©
            fail_silently=False,
        )

        
        messages.success(request, "L'utilisateur a √©t√© supprim√© avec succ√®s. Un email de notification a √©t√© envoy√©.")
        return redirect('liste_utilisateurs')
    
    return render(request, "supprimer_utilisateur.html", {"utilisateur": utilisateur})

@login_required
def modifier_utilisateur(request, utilisateur_id):
    utilisateur = get_object_or_404(User, id=utilisateur_id)
    
    # V√©rifier si l'utilisateur appartient au m√™me compte que l'admin connect√©
    if utilisateur.profil.compte != request.user.profil.compte:
        messages.error(request, "Vous n'avez pas l'autorisation de modifier cet utilisateur.")
        return redirect('liste_utilisateurs')
    
    if request.method == "POST":
        username = request.POST['username']
        email = request.POST['email']
        password = request.POST.get('password', '')
        password_confirm = request.POST.get('password_confirm', '')
        
        # V√©rification des champs
        if password or password_confirm:  # Si l'utilisateur souhaite modifier le mot de passe
            if password != password_confirm:
                messages.error(request, "Les mots de passe ne correspondent pas.")
                return redirect('modifier_utilisateur', utilisateur_id=utilisateur.id)
            if len(password) < 8 or not re.search(r'[A-Za-z]', password) or not re.search(r'\d', password) or not re.search(r'[!@#$%(),.?":{}|<>]', password):
                messages.error(request, "Le mot de passe doit contenir au moins 8 caract√®res, y compris des lettres, des chiffres et des caract√®res sp√©ciaux.")
                return redirect('modifier_utilisateur', utilisateur_id=utilisateur.id)
        
        try:
            validate_email(email)
        except ValidationError:
            messages.error(request, "Adresse email invalide. Veuillez r√©essayer.")
            return redirect('modifier_utilisateur', utilisateur_id=utilisateur.id)
        
        # V√©rifier si un autre utilisateur a le m√™me email ou nom d'utilisateur
        if User.objects.filter(username=username).exclude(id=utilisateur.id).exists():
            messages.error(request, "Ce nom d'utilisateur est d√©j√† utilis√©.")
            return redirect('modifier_utilisateur', utilisateur_id=utilisateur.id)
        if User.objects.filter(email=email).exclude(id=utilisateur.id).exists():
            messages.error(request, "Cette adresse email est d√©j√† utilis√©e.")
            return redirect('modifier_utilisateur', utilisateur_id=utilisateur.id)
        
         # Sauvegarder les informations avant la modification
        ancien_username = utilisateur.username
        ancien_email = utilisateur.email
        ancien_password_set = utilisateur.password  # Pour v√©rifier si le mot de passe a chang√©
        
        
        # Mettre √† jour l'utilisateur
        utilisateur.username = username
        utilisateur.email = email
        if password:
            utilisateur.set_password(password)
        utilisateur.save()
        
                # Envoi de l'email avec les nouvelles informations ou les informations actuelles
        subject = "Modification de votre compte SuperPharma"
        if ancien_username != utilisateur.username or ancien_password_set != utilisateur.password:
            message = f"""
            Bonjour {utilisateur.username},

            Nous vous informons que votre compte SuperPharma a √©t√© modifi√© avec succ√®s. Voici vos informations actualis√©es :

            - Nom d'utilisateur : {utilisateur.username}
            - Email : {utilisateur.email}
            - Mot de passe : Votre mot de passe a √©t√© modifi√©. Si vous ne l'avez pas fait vous-m√™me, veuillez contacter l'administrateur imm√©diatement.

            Si vous avez des questions, n'h√©sitez pas √† contacter votre administrateur de compte.

            Cordialement,
            L'√©quipe SuperPharma
            """
        else:
            message = f"""
            Bonjour {utilisateur.username},

            Nous vous informons que vos informations de compte SuperPharma ont √©t√© v√©rifi√©es et restent inchang√©es. Voici vos informations actuelles :

            - Nom d'utilisateur : {utilisateur.username}
            - Email : {utilisateur.email}
            - Mot de passe : Votre mot de passe reste inchang√©.

            Si vous avez des questions, n'h√©sitez pas √† contacter votre administrateur de compte.

            Cordialement,
            L'√©quipe SuperPharma
            """
        
        # Envoi de l'email
        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [utilisateur.email],
            fail_silently=False,
        )


        
        
        messages.success(request, "L'utilisateur a √©t√© modifi√© avec succ√®s. Un email a √©t√© envoy√© avec les d√©tails.")
        return redirect('liste_utilisateurs')
    
    return render(request, "modifier_utilisateur.html", {"utilisateur": utilisateur})


        


#fonction pour se connecter

from django.shortcuts import redirect
from django.contrib.auth import authenticate, login
from django.contrib import messages

from django.urls import reverse

def connecter_compte(request):
    if request.method == "POST":
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        # Authentifier l'utilisateur
        user = authenticate(request, username=username, password=password)
        
        if user is not None:
            # V√©rifier si l'utilisateur a un compte associ√©
            if hasattr(user, 'profil') and hasattr(user.profil, 'compte'):
                compte = user.profil.compte  # R√©cup√©rer le compte associ√© √† l'utilisateur
                
                # Exclure le compte "Ahoeke" (l'administrateur principal) de la v√©rification
                if compte.nom != "Ahoeke":  # V√©rifier si ce n'est pas le compte "Ahoeke"
                    compte.verifier_abonnement()  # V√©rifier l'abonnement

                    # V√©rification de l'expiration de l'abonnement
                    if compte.abonnement_est_expire():
                        messages.error(request, "Votre abonnement a expir√©. Veuillez renouveler votre paiement.")
                        return redirect("paypal_checkout")
                    
                    # V√©rification de la fin de la p√©riode d'essai
                    if compte.date_fin_abonnement() < timezone.now():
                        messages.error(request, "Votre p√©riode d'essai est termin√©e. Veuillez proc√©der au paiement pour continuer.")
                        return redirect("paypal_checkout")

                    # Avertir si l'abonnement expire dans moins de 7 jours
                    jours_restants = compte.jours_restants()
                    if jours_restants <= 7:
                        messages.warning(request, f"Attention ! Votre abonnement expire dans {jours_restants} jours.")

            # Connexion de l'utilisateur si tout est valide
            login(request, user)
            
            # G√©n√©rer l'URL de modification du mot de passe
            password_change_url = request.build_absolute_uri(reverse('modifierCode', kwargs={'uid': user.id}))
            
            # Envoyer un e-mail de notification avec le lien de modification du mot de passe
            send_mail(
                subject="Connexion √† votre compte SuperPharma",
                message=f"""Bonjour {user.username},\n\n
Vous venez de vous connecter √† votre compte SuperPharma. Si ce n'est pas vous, veuillez changer votre mot de passe imm√©diatement en cliquant sur le lien ci-dessous :\n
{password_change_url}\n\n

Cordialement,\n
L'√©quipe SuperPharma
""",
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[user.email],
                fail_silently=False,
            )

            # Redirection vers la page d'accueil
            return redirect(f'/acc/')
        else:
            messages.error(request, "Nom d'utilisateur ou mot de passe incorrect.")
            return redirect("login")
    
    return render(request, 'login.html')






# fonction pour  la verification d'email

from django.contrib.auth.models import User
from django.contrib import messages
from django.shortcuts import render, redirect
from django.core.mail import send_mail
from django.utils.crypto import get_random_string
from django.urls import reverse
from django.conf import settings
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes

from django.utils.encoding import force_bytes, force_str  # Importez ici
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode


from django.core.mail import send_mail
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.contrib import messages
from django.conf import settings
from django.utils import timezone
from django.urls import reverse
from django.utils.crypto import get_random_string
from datetime import  datetime, timedelta


import random
from datetime import datetime, timedelta
from django.utils import timezone
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.shortcuts import render, redirect
from django.contrib import messages
from django.conf import settings

def verification_Mail(request):
    if request.method == "POST":
        email = request.POST.get('email')

        # V√©rifier si l'email est valide
        if not email:
            messages.error(request, "Veuillez entrer une adresse email valide.")
            return redirect("verification")

        # V√©rifier si un utilisateur est associ√© √† cet email
        user = User.objects.filter(email=email).first()
        if not user:
            messages.error(request, "Aucun utilisateur trouv√© avec cette adresse email.")
            return redirect("verification")

        # G√©n√©rer un code al√©atoire de 6 chiffres
        verification_code = random.randint(100000, 999999)

        # D√©finir l'heure d'expiration (30 minutes)
        expiration_time = timezone.now() + timedelta(minutes=30)

        # Sauvegarder les infos en session
        request.session["verification_code"] = str(verification_code)
        request.session["expiration_time"] = expiration_time.isoformat()
        request.session["user_id"] = user.id

        # Envoyer le code par email
        subject = "Code de v√©rification - SuperPharma"
        message = f"""
Bonjour {user.username},

Votre code de v√©rification est : {verification_code}

Ce code expirera dans 30 minutes. Si vous n'avez pas demand√© cette action, veuillez ignorer cet email.

Cordialement,
L'√©quipe SuperPharma
"""
        from_email = settings.DEFAULT_FROM_EMAIL
        try:
            send_mail(subject, message, from_email, [email])
            messages.success(request, f"Un code de v√©rification a √©t√© envoy√© √† {email}.")
            return redirect("confirmation_code")  # Redirige vers la page de saisie du code
        except Exception as e:
            messages.error(request, f"Erreur lors de l'envoi de l'email : {str(e)}")
            return redirect("verification")

    return render(request, "verificaionMail.html")


def confirmation_code(request):
    if request.method == "POST":
        code = request.POST.get('verification_code')

        # R√©cup√©rer les donn√©es de session
        stored_code = request.session.get('verification_code')
        expiration_time_str = request.session.get('expiration_time')
        user_id = request.session.get('user_id')

        if not stored_code or not expiration_time_str:
            messages.error(request, "Code expir√© ou invalide.")
            return redirect("verification")

        # Convertir l'heure d'expiration en datetime
        expiration_time = datetime.fromisoformat(expiration_time_str)

        # V√©rifier si le code a expir√©
        if timezone.now() > expiration_time:
            messages.error(request, "Le code a expir√©.")
            return redirect("verification")

        # V√©rifier si le code correspond
        if str(code) == str(stored_code):
            user = User.objects.get(id=user_id)
            return redirect("modifierCode", uid=user.id)  # Redirection vers la modification
        else:
            messages.error(request, "Code incorrect.")
            return redirect("confirmation_code")

    return render(request, "confirmation_code.html")


#fonction pour changer le MDP

import re
from django.contrib.auth.tokens import default_token_generator
from django.utils.http import urlsafe_base64_decode
from django.utils.encoding import force_str
from django.contrib.auth.models import User
from django.shortcuts import render, redirect
from django.contrib import messages

from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.contrib import messages

from django.contrib.auth.tokens import default_token_generator
from django.utils import timezone
from datetime import timedelta

from django.utils import timezone
from django.contrib.auth.tokens import default_token_generator
from django.core.mail import send_mail
from django.utils.http import urlsafe_base64_decode
from django.utils.encoding import force_str
import re
from datetime import timedelta

from django.contrib.auth.tokens import default_token_generator
from django.utils.http import urlsafe_base64_decode
from django.utils.encoding import force_str
from django.contrib import messages
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.utils import timezone
from django.conf import settings
from datetime import timedelta

import re
from datetime import datetime, timedelta
from django.shortcuts import render, redirect
from django.contrib import messages
from django.utils import timezone
from django.contrib.auth.models import User

def Changement_Code(request, uid):
    # V√©rifier si l'ID utilisateur de l'URL correspond √† celui de la session
    user_id = request.session.get("user_id")
    expiration_time_str = request.session.get("expiration_time")

    if not user_id or not expiration_time_str or int(user_id) != int(uid):
        messages.error(request, "Session invalide ou expir√©e. Veuillez recommencer.")
        return redirect("verification")

    try:
        expiration_time = datetime.fromisoformat(expiration_time_str)
    except ValueError:
        messages.error(request, "Erreur de session. Veuillez recommencer.")
        return redirect("verification")

    if timezone.now() > expiration_time:
        messages.error(request, "Le d√©lai de modification a expir√©. Veuillez recommencer.")
        return redirect("verification")

    try:
        user = User.objects.get(pk=user_id)
    except User.DoesNotExist:
        messages.error(request, "Utilisateur introuvable.")
        return redirect("verification")

    if request.method == "POST":
        password = request.POST.get('password')
        password_confirm = request.POST.get('password_confirm')

        if password == password_confirm:
            if len(password) < 8:
                messages.error(request, "Le mot de passe doit contenir au moins 8 caract√®res.")
            elif not any(char.isdigit() for char in password):
                messages.error(request, "Le mot de passe doit contenir au moins un chiffre.")
            elif not any(char.isalpha() for char in password):
                messages.error(request, "Le mot de passe doit contenir au moins une lettre.")
            elif not re.search(r'[!@#$%(),.?":{}|<>]', password):
                messages.error(request, "Le mot de passe doit contenir au moins un caract√®re sp√©cial (!@#$%(),.?\":{}|<>).")
            else:
                user.set_password(password)
                user.save()
                request.session.pop("user_id", None)
                request.session.pop("expiration_time", None)
                request.session.pop("verification_code", None)
                messages.success(request, "Votre mot de passe a √©t√© modifi√© avec succ√®s. Connectez-vous.")
                return redirect("login")
        else:
            messages.error(request, "Les mots de passe ne correspondent pas.")

    return render(request, "nouveauMDP.html")





@login_required
def modifier_photo_profil(request, utilisateur_id):
    utilisateur = User.objects.get(id=utilisateur_id)
    if request.method == 'POST':
        form = PhotoProfilForm(request.POST, request.FILES, instance=utilisateur.profil)
        if form.is_valid():
            form.save()
            return redirect('liste_utilisateurs')
    else:
        form = PhotoProfilForm(instance=utilisateur.profil)
    
    return render(request, 'modifier_photo_profil.html', {'form': form})
# donction de deconnection




from django.http import JsonResponse

@login_required
def confirmer_abonnement(request):
    if request.method == "POST":
        data = json.loads(request.body)
        user = request.user
        if hasattr(user, 'profil') and hasattr(user.profil, 'compte'):
            compte = user.profil.compte
            compte.paypal_subscription_id = data.get("subscriptionID")
            compte.abonnement_active = True
            compte.save()
            return JsonResponse({"success": True})
    return JsonResponse({"success": False}, status=400)



def Deconnection(request):
    
    logout(request)
    return redirect("login")     



